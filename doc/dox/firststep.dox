/*! \page pagefirststep First step

This first step explains how to write your first program:
- load a image,
- filter the noise,
- segment the granular phase,
- display and save the result.

<!--In this presentation, you use the C++ language and you find the python, Java translation at the end of the page.  -->


The code source of the main.cpp delivered in the Population project is :
\include firststep.cpp
producing this image.
 
\image html iexseg.png
Line by line,
\code
#include"Population.h"
\endcode
-> include the single header file of the Population library. 
\code
using namespace pop;
\endcode
-> population namespace to facilate the declarations in avoiding pop::
\code
Mat2UI8 img;
\endcode
-> instantiate an object as 2d image with grey-level values  
\code
img.load(../image/iex.png");
\endcode
-> load the image (iex.png file is contained in the population folder, Population manage pgm, png, jpg, bmp formats)
\code
img = PDE::nonLinearAnisotropicDiffusion(img);//filtering
\endcode
-> filter the image to remove the noise. The algorithms are organized in <a href="modules.html">modules</a> as “procedural” classes containing a collection of static
function members. To access the algorithms, you can write the scope resolution operator.
\code
double value;
Mat2UI8 threshold = Processing::thresholdOtsuMethod(img,value);//threshold segmentation
\endcode 
-> segment the image with the Otsu's threshold
\code
threshold.save("iexthreshold.png");
\endcode
-> save the image in the input path
\code
Mat2RGBUI8 color = Visualization::labelForeground(threshold,img);//Visual validation
\endcode
-> create a color image with the segmentation in foreground of the initial image
\code
color.display();
\endcode
-> display this image in a windows.

Now, you are ready to code your own program by replacing these source lines of code by your !

Pyton code:
\include firststep.py

*/ 
