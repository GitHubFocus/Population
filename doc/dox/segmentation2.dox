/*! \page pagesegmentation2  Watershed segmentation

A prerequisite of a quantitative matrix analysis is the phase partition (segmentation) that is the transformation of the level matrix to the labelled matrix where each label corresponds to a phase of the material. The error of the quantitative analysis depends on the match between the segmented structure and the real structure. Basically, segmentation is decomposed in two parts: 

 - filtering: to increase the signal to noise ratio without removing some structural features like the presence of cracks. The library includes the classical morphological filters and also the efficient non-linear anisotropic diffusion.
 - segmentation: to convert the grey-level matrix to a labelled matrix. When the contrast-to-noise ratio between the phases of the material are enough good, the classical threshold segmentation can be used. But, in many cases, the matrix is hampered by an low signal-to-noise ratio, this library includes a methodology based on a growing process starting from seeds on the topographic surface.



To illustrate the watershed segmentation, we will show you an example with a 3D matrix.\n
First, you load the 3d matrix:
\code
Mat3UI8 img;
img.loadFromDirectory("/home/vincent/Desktop/ImageProject/SedimentaryRock/slice/","Data","png");
\endcode
\image html Rock.gif
Here, you load all png files in the folder /home/vincent/Desktop/ImageProject/SedimentaryRock/slice/ with the basename Data and the extension png to create the 3D matrix.\n
In order to create a prototype and calibrate it rapidly, you extract a sub-matrix to reduce the computational time of process:
\code
img = img(Vec3I32(0,0,0),Vec3I32(64,64,64));
img.display();	
\endcode
When the prototype is finished, you comment this line to process the full matrix and you go to the coffee room :)\n
\image html rock1.png
This matrix of rock material is hampered by noise (see the above matrix). You reduce it by applying the non linear anisotropic diffusion:
\code 
Mat3UI8 imgfilter= PDE::nonLinearAnisotropicDiffusion(img);
imgfilter.display();
\endcode
\image html rock2.png
The grey level inside the pore-space (the blackest phase), the oil (the middle gray phase) and the granular (the lighest phase) is quite homogeneous but you cannot apply the
threshold segmenetation due to the interface artefact when you have three phase. You have some voxels at the interface between the blackest phase and the lighest phase with a  middle gray. So, if 
you apply the threshold segmentation for the  middle gray phase, these voxels will be assigned badly to this phase.  You can see this artefact in the below figure where some blue lines corresponding to the oil phase are located at the interface between the pore phase and the grain phase. 
\image html rock3.png "Oil segmentation with interface artefact"
For this matrix, we will apply the watershed segmentation as presented in the chapter 3 of Phd thesis http://tel.archives-ouvertes.fr/tel-00516939/en/. The main of this segmentation is the localization of a seed inside each phase with these constraints for each seed:
- the seed must be included in the associated phase,
- the seed must hit each connected compenents of the associated phase.

To create the seeds, you apply the threshold operation in order to respect these previous constraints. To find the threshold values, you can use this manual tool:
\code
int lowvalue,highvalue;
Application::thresholdSelection(imgfilter,lowvalue,highvalue);	
\endcode
When these values are found, you can apply the threshold operation
\code
Mat3UI8 grain= Processing::threshold(imgfilter,155);
Mat3UI8 oil  = Processing::threshold(imgfilter,70,110);
oil  = Processing::openingRegionGrowing(oil,2);//To remove the interface artefact
Mat3UI8 air  =  Processing::threshold(imgfilter,0,40);
\endcode
For the oil seed, you apply the opening operator to remove the interface artefact. Then to merge the seeds in a single label matrix, you do that:
\code
Mat3UI8 seed  = Processing::labelMerge(grain,oil);
seed  = Processing::labelMerge(seed,air);
Visualization::labelForeground(seed,imgfilter).display();//check the good seed localization
\endcode
\image html rock4.png "Seed Localization"
Then, you create the topographic surface as the magnitude of the gradient matrix. The Deriche's gradient removes the fluctuation at small scales for a smooth gradient. 
\code
Mat3UI8 gradient = Processing::gradientMagnitudeDeriche(img,1.5);
\endcode
Finally, you apply the watershed transformation on the topographic surface with the seed matrix.
\code
Mat3UI8 water = Processing::watershed(seed,gradient);
Visualization::labelAverageColor(water,img).display();
\endcode
\image html rock5.png
Now, you can comment the crop at the beginning to apply the segmentation procedure on the full image to get this matrix at the end:
\image html Segmentation.gif  "Segmented matrix"

C++ code
\include segmentation2.cpp
Pyton code
\include segmentation2.py

*/
