/*! \page pageimagebasic  Some basic definitions


\section SomeDefinition Formal definitions

\subsection FormalDefinition Definition of a function
The idea of a function, \f$f\f$, as a matrix, is that the input quantity completely determines the output quantity. The input quantity belongs to a space \f$E\f$ and the output to the space \f$F\f$: \f[ \begin{matrix}  f\colon   \mathcal{D}\subset E & \to& F \\ x & \mapsto& y = f(x) \end{matrix} \f]
with \f$\mathcal{D}\f$ a subset of \f$E\f$ that is the domain of definition of the function.

\subsection MatrixDefinition Definition of a Matrix as a special case of a function
For the special case of a matrix, the definition is 
- \f$\mathcal{D}\subset E \f$ : a  matrix is a regular tessellation of a domain of the n-dimensional euclidean space where each cell is a n-square (a square in 2-dimension called pixel, a cube in 3-dimension called  voxel). A cell is located with n integers. In 2d, we have 2 integers \f$(i,j)\in\mathbb{Z}^2\f$ representing the i-th row and the j-th column in the matrix convention (so \f$E=\mathbb{Z}^2\f$). In 3d, 3 integers \f$(i,j,k)\f$ representing the i-th row,  the j-th column, and the k-th depth. The domain of definition is the number of rows and columns of a matrix. 

- \f$F\f$ : To access the pixel value, we call the function f(i,j). For a gray-level matrix, this value is a grey-level. This grey-level is usually coded in one byte representing the range (0, 28 âˆ’1) = (0, 255) where the value 0 represents the black colour, 255 the white colour, and any value between (0, 255) a
 fraction between both colours.

In Population library, an image is a matrix.  

\image html grid3.png Left: 2D  matrix with 6 rows and 5 columns with a pixel type coded in one byte, right: grey-level representation


\section StartCoding MatN
\subsection MatrixStructure Matrix structure

The matrix class, MatN<Dim,PixelType>, (see \ref MatN)  is written in generic programming with template parameters. The first one is the dimension, the second one the pixel/voxel type. For a
ready-to-use utilisation, we use some typedef declarations to define the usual types to allow coding in C-style as these ones:
    - Mat2UI8: a 2d matrix with a pixel type coded in 1 byte for an unsigned integer between 0 and 255,  (Mat2UI8=MatN<2,UI8>)
    - Mat2RGBUI8: a 2d matrix with a pixel type coded with a \ref RGB color with 1 byte per channel, (Mat2UI8=MatN<2,RGBUI8>)
    - Mat2F64: a 2d matrix with a pixel type coded in float type,
    - Mat2UI32: a 2d matrix with a pixel type coded in unsigned integer in 4 bytes,
    - Mat3UI8: a 3d matrix with a pixel type coded in 1 byte for an unsigned integer between 0 and 255.

\subsection AccessingPixel Accessing pixel intensity values

In order to get pixel intensity value, you have to know the pixel-type of an matrix. Here is an example for a grey-image image (type Mat2UI8) and pixel coordinates i and j:
\code
    Mat2UI8 m(10,10);//create a 2d matrix with 10-row and the 10-columns and with UI8 pixel type (0,1,2...,255)
    int i=4;
    int j=6;
    UI8 intensity = 200;//set the intensity at 200
    m(i,j) = intensity;//set the pixel value at 200
    intensity = m(i,j);//access the pixel value at 4-row and the 6-column
    std::cout<<m<<std::endl;
\endcode
Alternatively, you can use the following notation with a 2-d vector (see \ref VecN) to access the pixel value:
\code
    Mat2F64 m(4,3);//create a 2d matrix with 4-row and the 3-columns and with float pixel type
    Vec2I32 x(2,1);
    m(x) = 2.45;//set the pixel value at 2.45
    std::cout<<m<<std::endl;
\endcode
Now let us consider a 3 channel image with RGB color ordering:
\code
    Mat2RGBUI8 m(10,8);//create a 2d matrix with rgb pixel type
    Vec2I32 x(4,6);
    RGBUI8 value;
    value.r()=200;//set the red channel at 200
    value.g()=100;//set the green channel at 100
    value.b()=210;//set the blue channel at 210
    m(x) = value;//set the pixel value
    m.display("test 2",false);
\endcode
To generate the top figures, the code is :  
\code
    std::cout<<"\ntest3"<<std::endl;
    Mat2UI8 m(6,5);//construct a 2d matrix with 1 byte pixel type with 6 rows and 5 columns
    m(0,0)= 20;m(0,1)= 20;m(0,2)= 20;m(0,3)= 20;m(0,4)= 20;//set the pixel values of the first row
    m(1,0)= 20;m(1,1)=255;m(1,2)= 20;m(1,3)=255;m(1,4)= 20;//set the pixel values of the second row
    m(2,0)= 20;m(2,1)= 20;m(2,2)=255;m(2,3)= 20;m(2,4)= 20;//set the pixel values of the third row
    m(3,0)= 20;m(3,1)= 20;m(3,2)= 20;m(3,3)= 20;m(3,4)= 20;//set the pixel values of the fourth row
    m(4,0)= 20;m(4,1)=150;m(4,2)=150;m(4,3)=150;m(4,4)= 20;//set the pixel values of the fifth row
    m(5,0)= 20;m(5,1)= 20;m(5,2)= 20;m(5,3)= 20;m(5,4)= 20;//set the pixel values of the sixth row
    std::cout<<m<<std::endl;//display the array (left figure)
    m.display("test 3");//display the image (right figure)
\endcode
You can see also \ref pagefirststep and the also the documentation of the class \ref MatN

Finally, you can start to work with 3d matrix (as tomography, IRM images)
\code
    Mat3UI8 m(3,3,4);//create a 3d matrix with 3-row, 3-columns and 4-depth and UI8 voxel type
    Vec3I32 x(1,0,1);
    m(x) = 200;//set the pixel value
    std::cout<<m<<std::endl;
\endcode
C++ code:
\include basic_definition.cpp
*/
