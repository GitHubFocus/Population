/*! \page pageqmake qmake

\section qmakeexecutable Executable 
 
You open the project $${POPULATIONPATH}/population.pro. You compile this project and start to code in the main.cpp file (see \ref pagefirststep).

\section qmakesharedlibrary Shared library

Or you create a shared library by commenting this line in $${POPULATIONPATH}/population.pro
\code
#CONFIG += MAKE_EXE
\endcode
You compile it that generates the file population.dll (.so for linux) in the directory  $${POPULATIONPATH}/lib .

To load this library in your program,  you create a project file (.pro) containing these following lines:
\code
TEMPLATE = app
SOURCES += main.cpp # the main file of your project (you have to create it)

POPULATIONPATH=/home/vincent/DEV2/Population #replace by yours
!include($${POPULATIONPATH}/populationconfig.pri)
DEPENDPATH=$${POPULATIONPATH}/lib
LIBS+=-L$${POPULATIONPATH}/lib # the path where the dynamic shared library is located for the linking
LIBS += -lpopulation
\endcode
You build and run this project. Now you can start to code in the main.cpp file (see \ref pagefirststep). For instance, 
\code
#include"Population.h"
using namespace pop;//Population namespace
int main(){
    Mat2F64 m(2,2);// a 2d matrix with two rows and two columns
    m(0,0)=1;m(0,1)=0.5;
		std::cout<<m<<std::endl;//#display in console
    m.display();//#display in windows
}
\endcode
\section qmakemodule Activate modules

Of course, you can activate third party modules (VLC, openmp) by uncommented lines in  populationconfig.pri file. For instance for openmp,
\code
CONFIG += HAVE_OPENMP  #openmp optimization working for many algorithms (a must have for 3d images or real time)
\endcode
*/

